#page-landing{
    background: var(--color-primary);
}

#page-landing #container{
    color: var(--color-text-in-primary);
}

.logo-container{
    text-align: center; /*Alinha a tag q tenha relação com texto ao centro. 
                          Levando em consideração a caixa(div logo-container).*/
    margin-bottom: 3.2rem;
}

.logo-container h2{
    font: 500 3.6rem Poppins;
    line-height: 4.6rem;
    margin-top: 0.8rem;
}

.logo-container img{
    height: 10rem;
}

.hero-image{
    width: 100%;
}

.buttons-container{
    display: flex;
    justify-content: center;
    margin: 3.2rem 0;
}

.buttons-container a{
    width: 30rem;
    height: 10.4rem;

    border-radius: 0.8rem; /*Arredonda as bordas*/

    font: 700 2.4rem Archivo;

    /*Alinhar conteúdo dentro dos botões*/
    display: flex;
    justify-content: center;
    align-items: center;
    
    text-decoration: none;

    color: var(--color-button-text);

    transition: background 0.2s ;/*Transição de animações: (onde será colocado) (tempo p/ mudar)*/
}

.buttons-container a img{
    width: 4rem;
    margin-right: 2.4rem;
}

.buttons-container a.study{
    margin-right: 1.6rem;
    background-color: var(--color-primary-lighter);
}

.buttons-container a.study:hover{ /*Essa classe CSS só será ativada 
                                    quando button estiver no modo hover(mouse em cima)*/
    background-color: var(--color-primary-light);
}

.buttons-container a.give-classes{
    background-color: var(--color-secondary);
}

.buttons-container a.give-classes:hover{
    background-color: var(--color-secondary-dark);
}

.total-connection{
    font-size: 1.2rem;
    display: flex;
    align-items: center;
    justify-content: center;
}

.total-connection img{
    margin-left: 0.8rem;
}

/*--------------------------------- A partir daqui é o case web desktop ----------------------------*/
/*O @media controla qual CSS vai ser usado em relação ao tamanho da tela*/
@media(min-width: 1100px){
    #page-landing #container{
        max-width: 1100px;
        display: grid; /*O grid funciona da mesma maneira q no mat-grid do angular
                         Nos iremos definir o nº de colunas e linhas na página.*/
        grid-template-columns: 2fr 1fr 2fr; /*Define a qtd de coluna. Podemos definir em % ou em fr(frações, ex.: 1fr 1fr = 2 colunas iguais) */
        grid-template-rows: 350px 1fr; /*Define a qtd de linhas. Podemos definir em % ou em fr*/
        grid-template-areas: /*Define as áreas do grid, para q vc defina os quadradrinhos da página.*/
        "proffy image image" /*linha 1 do grid*/
        "button button texting"; /*linha 2 do grid*/
        gap: 60px;/*Podemos colocar separadamente por coluna e por linha*/
    }

    .logo-container{
        grid-area: proffy; /*Sem as aspas*/
        text-align: initial;
        align-self: center;
    }

    .logo-container img{
        height: 100%;
    }

    .hero-image{
        grid-area: image;
        height: 350px;
    }

    .buttons-container{
        grid-area: button;
        justify-content: flex-start;
    }

    .total-connection{
        grid-area: texting;
        align-self: center;
        justify-self: end;
    }
}

@media(max-width: 699px){
    :root{
        font-size: 40%;
    }
}

